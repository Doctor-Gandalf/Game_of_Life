#!/usr/bin/python3
__author__ = 'Kellan Childers'

import curses
from introscreen import IntroScreen
from conwayscreen import ConwayScreen
from math import floor


def game(stdscr):
    # Ensures a clean visual space.
    stdscr.clear()
    curses.curs_set(False)
    stdscr.nodelay(True)

    # Sets the three main colors for the Conway graph.
    curses.init_pair(1, curses.COLOR_BLUE, curses.COLOR_BLUE)
    curses.init_pair(2, curses.COLOR_WHITE, curses.COLOR_WHITE)
    curses.init_pair(3, curses.COLOR_BLACK, curses.COLOR_BLACK)
    stdscr.bkgd(' ', curses.color_pair(2))

    # Finds the size of the console, then uses that to set up the size of the game.
    console_height, console_width = stdscr.getmaxyx()
    game_height = console_height if console_height <= 50 else floor(7*console_height/8)
    game_width = console_width if console_width <= 100 else floor((7*console_width)/8)

    # Introduces user to game.
    intro_win = IntroScreen(console_height, console_width)
    intro_win.add_intro_text()

    # Creates a pad and Conway graph based on the size of the console.
    conway = intro_win.start_conway(game_height, game_width)
    game_pad = ConwayScreen(console_height, console_width, game_height, game_width, conway)

    # Executes Conway's Game of Life repeatedly until user inputs character.
    while True:
        game_pad.take_turn()

        # Since there is no delay on picking up characters, not inputting a character skips over break.
        try:
            key = stdscr.getkey()
            if key == 'q':
                break
        except curses.error:
            # curses.error is raised if there was no keypress, so loop should continue.
            pass

if __name__ == "__main__":
    # curses.wrapper ensures that program will always fully exit from curses mode if an error occurs.
    curses.wrapper(game)
